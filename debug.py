import random
import pygame as pg
from settings import Window
from collections import deque, defaultdict
import numpy as np

pg.init()
font = pg.font.Font(None, 30)

def debug(display_surface, info: str, y:int = 10, x: int = 10):
    """draw debug text"""
    debug_surf = font.render(str(info), True, 'white')
    debug_rect = debug_surf.get_rect(topleft=(x, y))
    pg.draw.rect(display_surface, 'black', debug_rect)
    display_surface.blit(debug_surf, debug_rect)


class Graph_Display:
    def __init__(self, w=300, n_points=50, fps=60) -> None:
        self.size = w
        self.n_points = n_points
        self._graph = defaultdict(lambda:deque([0], maxlen=self.n_points))
        self.text = Text(int(w/30))
        self.surface = pg.Surface((w, int((w*2)/3)))
        self.line_thicc = (w // 300) + 1

        self.bg = self._init_surface()

        self.fps = fps


        

    def _init_surface(self):
        surface = self.surface.copy()
        border = pg.Rect(int(self.size/12), int(self.size/12), int(self.size*5/6), int(self.size*0.5))
        self.gap = self.size*11/(15*(self.n_points-1))
    

        highest = int(self.size/10)
        mid = int(self.size * 0.3)
        lowest = int(self.size * 0.5)

        self.high = highest - mid

        surface.fill('black')
        surface.blit(self.text('0', 0x93D3FF), (int(self.size/20), mid))
        surface.blit(self.text('100', 0x93D3FF), (int(self.size/30), highest))
        surface.blit(self.text('-100', 0x93D3FF), (int(self.size/60), lowest))

        pg.draw.rect(surface,0x27A7FF, border, width=self.line_thicc)
        r = lambda: random.randint(0,255)
        #self.color = ['#%02X%02X%02X' % (r(),r(),r()) for _ in range(10)]
        self.color = ['red', 'green', 'blue', 'white']

        return surface

    def draw(self, **iter_y):
      
        self.surface.blit(self.bg, (0, 0))

        for i, (key, value) in enumerate(iter_y.items()):
            self._graph[key].append(value)
            lines = [(self.size/8 + (i*self.gap), int(self.size/3 + np.interp(y, [-100, 100], [-1*self.high, self.high]))) for i, y in enumerate(self._graph[key])]
            #print(lines[-3:])
            if key == 'pid':
                self.color[i] = 'white'
            pg.draw.lines(self.surface, self.color[i], False, lines, width=self.line_thicc)
            self.surface.blit(self.text(f'{key}:â€”', self.color[i]), (self.size*7/8, int(self.size * (i/30))))
        

        return self.surface



class Text:
    def __init__(self, size=10) -> None:
        self.font = pg.font.SysFont('Comic Sans MS', size)
        
    def __call__(self, text:str, color='black'):
        t = self.font.render(text, False, color)
        return t
        

class Graph(Window):
    SIZE = [300, 200]
    def __init__(self, title: str = None, ys = []) -> None:
        pg.init()
        self.debug = False
        self.title = title
        self.ratio = 2
        self.surface = pg.Surface(self.SIZE)
        self._screen = pg.display.set_mode([self.ratio*i for i in self.SIZE])
        self.Clock = pg.time.Clock()
        self.set_caption(self.title)


        self.iter_y = iter(self.get_graph(ys))
        self.iter_i = iter(self.get_graph([i for i in range(100)]))
        self.grapher = Graph_Display(300)
        

    @staticmethod
    def get_graph(ys):
        while True:
            for y in ys:
                yield y
            

    def draw(self):
        self.surface.blit(self.grapher.draw(p=next(self.iter_y), i=next(self.iter_i)), (0, 0))
        

        
        

if __name__ == "__main__":
    import matplotlib.pyplot as plt
    import numpy as np

    y = [-77.7, -37.0, 70.3, -14.8, -14.8, -25.900000000000002, -11.100000000000001, -11.100000000000001, -14.8, -7.4, -18.5, -7.4, 81.4, -11.100000000000001, 88.80000000000001, -33.300000000000004, 81.4, -44.400000000000006, 81.4, 0.0, 37.0, 11.100000000000001, 11.100000000000001, 14.8, 0.0, -7.4, 0.0, -11.100000000000001, -11.100000000000001, -14.8, -11.100000000000001, -11.100000000000001, -22.200000000000003, 7.4, -3.7, -18.5, -3.7, -7.4, -11.100000000000001, -11.100000000000001, -18.5, -3.7, 7.4, 3.7, 7.4, 3.7, -3.7, 3.7, -11.100000000000001, 0.0, -18.5, -44.400000000000006, 22.200000000000003, -14.8, 0.0, 14.8, 14.8, 7.4, 3.7, 7.4, -3.7, 7.4, 14.8, 0.0, 11.100000000000001, 0.0, 11.100000000000001, 14.8, 3.7, 66.60000000000001, -25.900000000000002, 62.900000000000006, -37.0, 59.2, -55.5, 62.900000000000006, -11.100000000000001, 55.5, 59.2, -25.900000000000002, 55.5, 0.0, 62.900000000000006, 55.5, 55.5, -25.900000000000002, 62.900000000000006, 59.2, 59.2, 51.800000000000004, 55.5, 51.800000000000004, 51.800000000000004, 51.800000000000004, 55.5, 51.800000000000004, 51.800000000000004, 66.60000000000001, 62.900000000000006, 66.60000000000001, 70.3, 70.3, 74.0, 0.0, 29.6, 7.4, 22.200000000000003, -3.7, 7.4, 25.900000000000002, -18.5, -3.7, 0.0, 0.0, 0.0, 0.0, -3.7, 3.7, 0.0, -14.8, -7.4, -14.8, 0.0, -18.5, -7.4, -18.5, -3.7, -70.3, 25.900000000000002, -66.60000000000001, -66.60000000000001, -51.800000000000004, 37.0, -59.2, -55.5, -55.5, -51.800000000000004, -51.800000000000004, -55.5, -55.5, -59.2, -66.60000000000001, -74.0, -70.3, -81.4, -81.4, -77.7, -55.5, -66.60000000000001, -11.100000000000001, 22.200000000000003, 74.0, -25.900000000000002, 66.60000000000001, -37.0, 62.900000000000006, 55.5, 55.5, 55.5, 59.2, 62.900000000000006, 62.900000000000006, 62.900000000000006, 66.60000000000001, 70.3, 66.60000000000001, 70.3, 66.60000000000001, 62.900000000000006, 55.5, 59.2, -11.100000000000001, 66.60000000000001, 59.2, -11.100000000000001, 40.7, 3.7, 18.5, 33.300000000000004, -3.7, 37.0, -3.7, 18.5, 0.0, 14.8, 0.0, 11.100000000000001, 3.7, 11.100000000000001, 3.7, 7.4, 0.0, 14.8, 7.4, 11.100000000000001, 0.0, -3.7, 7.4, 7.4, 7.4, 11.100000000000001, 7.4, 0.0, 3.7, 3.7, 7.4, -14.8, 11.100000000000001, -18.5, 3.7, 7.4, -11.100000000000001, 7.4, 3.7, 7.4, 7.4, 22.200000000000003, 18.5, 7.4, 7.4, -3.7, -18.5, -25.900000000000002, -37.0, 22.200000000000003, -25.900000000000002, -3.7, 3.7, -3.7, 7.4, 7.4, 3.7, 3.7, 7.4, -3.7, 3.7, -11.100000000000001, 0.0, -77.7, 25.900000000000002, -74.0, 51.800000000000004, -70.3, -66.60000000000001, 48.1, -66.60000000000001, -55.5, -55.5, -51.800000000000004, -48.1, -40.7, -44.400000000000006, -48.1, -48.1, -55.5, -55.5, -59.2, -66.60000000000001, -70.3, -70.3, -74.0, -74.0, -85.10000000000001, -66.60000000000001, -40.7, -22.200000000000003, -25.900000000000002, -18.5, -11.100000000000001, -3.7, 7.4, 25.900000000000002, 29.6, 29.6, 29.6, 29.6, 14.8, 0.0, 11.100000000000001, 7.4, 14.8, 25.900000000000002, 37.0, 14.8, 77.7, -18.5, 81.4, -18.5, 77.7, 0.0, 81.4, 74.0, -18.5, 70.3, 77.7, 74.0, -18.5, 74.0, 66.60000000000001, 62.900000000000006, 70.3, -48.1, 77.7, 81.4, -25.900000000000002, 88.80000000000001, 88.80000000000001, -51.800000000000004, -14.8, 92.5, -44.400000000000006, 51.800000000000004, 18.5, 25.900000000000002, 11.100000000000001, 22.200000000000003, 18.5, 11.100000000000001, 18.5, 85.10000000000001, 7.4, -7.4, 44.400000000000006, 37.0, 0.0, 3.7, 7.4, -18.5, -3.7, -7.4, -18.5, -14.8, -3.7, -11.100000000000001, -11.100000000000001, -14.8, -7.4, -11.100000000000001, 3.7, -3.7, -3.7, -11.100000000000001, -22.200000000000003, -3.7, -25.900000000000002, 7.4, -33.300000000000004, -11.100000000000001, -29.6, -18.5, -3.7, -29.6, 3.7, -40.7, -7.4, -11.100000000000001, -40.7, -18.5, -7.4, -11.100000000000001, -3.7, -18.5, -7.4, -14.8, -3.7, -3.7, -25.900000000000002, -7.4, -7.4, -18.5, 0.0, -3.7, -7.4, -18.5, -11.100000000000001, -11.100000000000001, 14.8, -3.7, 25.900000000000002, 74.0, -44.400000000000006, 66.60000000000001, -18.5, 74.0, -25.900000000000002, 70.3, -33.300000000000004, 7.4, 22.200000000000003, 3.7, 11.100000000000001, 22.200000000000003, 7.4, 7.4, 22.200000000000003, 3.7, 11.100000000000001, 7.4, 77.7, -25.900000000000002, 14.8, 74.0, -22.200000000000003, 62.900000000000006, -22.200000000000003, 62.900000000000006, 59.2, 51.800000000000004, 55.5, -44.400000000000006, 62.900000000000006, 59.2, 29.6, 48.1, -18.5, 55.5, 33.300000000000004, 37.0, 37.0, 37.0, 29.6, 18.5, 14.8, -25.900000000000002, 70.3, 55.5, 51.800000000000004, -51.800000000000004, 62.900000000000006, 44.400000000000006, 33.300000000000004, 29.6, 25.900000000000002, 25.900000000000002, 18.5, 25.900000000000002, 29.6, 33.300000000000004, 44.400000000000006, 51.800000000000004, 85.10000000000001, 85.10000000000001, 111.0, 118.4, 88.80000000000001, -59.2, -51.800000000000004, -51.800000000000004, -48.1, -48.1, -48.1, -55.5, -55.5, -59.2, -55.5, 3.7, -44.400000000000006, 11.100000000000001, -37.0, 3.7, -7.4, -11.100000000000001, -3.7, -18.5, 3.7, -11.100000000000001, 3.7, 0.0, 7.4, 3.7, -7.4, 7.4, -3.7, 7.4, -7.4, 3.7, -3.7, 7.4, 7.4, 7.4, 7.4, -11.100000000000001, 3.7, 7.4, -3.7, 3.7, 7.4, -3.7, 11.100000000000001, -7.4, 7.4, -3.7, 7.4, -3.7, 11.100000000000001, -3.7, 11.100000000000001, -7.4, -3.7, 7.4, 0.0, -3.7, 11.100000000000001, 0.0, -3.7, 3.7, 7.4, -3.7, 0.0, -7.4, 0.0, 7.4, 7.4, -3.7, 7.4, 0.0, -44.400000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006, 62.900000000000006]
    # x = np.arange(len(y))

    # plt.plot(x, y)
    # plt.show()
    graph = Graph('graph', y)
    graph.mainloop()